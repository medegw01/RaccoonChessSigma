name: CLI Build

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  code_check:
    name: Elinting
    runs-on: ubuntu-latest
    steps:
      - name: Setup repo
        uses: actions/checkout@v2
      - name: Test using Node.js
        uses: actions/setup-node@v1
        with:
          node-version: "15.x"
      - run: npm install
      - run: npm i -D typescript jest ts-jest @types/jest eslint @typescript-eslint/parser @typescript-eslint/eslint-plugin
      - name: Run EsLinter
        run: npm run lint:cli
      - name: Fix lint error
        if: ${{ failure() }}
        run: echo "npm run lint-and-fix"

  sanitize:
    name: Check for forbidden words
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the code
        uses: actions/checkout@v2
      - name: Run the forbidden words scan
        uses: dell/common-github-actions/code-sanitizer@main
        with:
          args: /github/workspace
  test:
    name: Run Go unit tests and check package coverage
    runs-on: ubuntu-latest
    steps:
      - name: Setup repo
        uses: actions/checkout@v2
      - name: Install jq
        run: sudo apt-get install jq
      - name: Test using Node.js
        uses: actions/setup-node@v1
        with:
          node-version: "12.x"
      - run: npm install
      - run: npm i -D typescript jest ts-jest @types/jest
      - name: Run Test
        run: npm run test:cli
      - name: Check coverage
        run: |
          NEWLINE=$'\n'
          fail_checks=0
          echo === Coverage...

          lines=$(jq -n "$(jq '.total.lines.pct' coverage/coverage-summary.json) | floor")
          statements=$(jq -n "$(jq '.total.statements.pct' coverage/coverage-summary.json) | floor")
          functions=$(jq -n "$(jq '.total.functions.pct' coverage/coverage-summary.json) | floor")
          branches=$(jq -n "$(jq '.total.branches.pct' coverage/coverage-summary.json) | floor")

          [ ${lines} -lt ${THRESHOLD} ] && echo === "Failed Coverage${NEWLINE}Line Coverage: ${lines}%, but threshold is set to ${THRESHOLD}%" && fail_checks=1
          [ ${statements} -lt ${THRESHOLD} ] && echo === "Failed Coverage${NEWLINE}Statements Coverage: ${statements}%, but threshold is set to ${THRESHOLD}%" && fail_checks=1
          [ ${functions} -lt ${THRESHOLD} ] && echo === "Failed Coverage${NEWLINE}Function Coverage: ${functions}%, but threshold is set to ${THRESHOLD}%" && fail_checks=1
          [ ${branches} -lt ${THRESHOLD} ] && echo === "Failed Coverage${NEWLINE}Branches Coverage: ${branches}%, but threshold is set to ${THRESHOLD}%" && fail_checks=1

          [ "${fail_checks}" == "0" ] && echo === Passes Coverage
          exit ${fail_checks}
        env:
          THRESHOLD: 90

  malware_security_scan:
    name: Malware Scanner
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the code
        uses: actions/checkout@v2
      - name: Run malware scan
        uses: dell/common-github-actions/malware-scanner@main
        with:
          directories: .
          options: -ri
  ts_security_scan:
    name: TypeScript security
    runs-on: ubuntu-latest
    steps:
      - name: Setup repo
        uses: actions/checkout@v2
