name: CLI Build

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:
  schedule:
    - cron: "0 0 * * 0" # scan weekly(by sunday)

jobs:
  code_check:
    name: Linting and TypeScript Security
    runs-on: ubuntu-latest
    steps:
      - name: Setup repo
        uses: actions/checkout@v2
      - name: Test using Node.js
        uses: actions/setup-node@v1
        with:
          node-version: "15.x"
      - run: npm install
      - run: npm i -D typescript jest ts-jest @types/jest eslint @typescript-eslint/parser @typescript-eslint/eslint-plugin
      - name: Run EsLinter
        run: npm run lint:cli
      - name: Fix lint error
        if: ${{ failure() }}
        run: echo "npm run lint-and-fix"

  sanitize:
    name: Forbidden Word Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the code
        uses: actions/checkout@v2
      - name: Run the forbidden words scan
        uses: dell/common-github-actions/code-sanitizer@main
        with:
          args: /github/workspace
  test:
    name: Test and Code Coverage
    runs-on: ubuntu-latest
    steps:
      - name: Setup repo
        uses: actions/checkout@v2
      - name: Install jq
        run: sudo apt-get install jq
      - name: Test using Node.js
        uses: actions/setup-node@v1
        with:
          node-version: "15.x"
      - run: npm install
      - run: npm i -D typescript jest ts-jest @types/jest
      - name: Run Test
        run: npm run test:cli
      - name: Check coverage
        run: |
          NEWLINE=$'\n'
          fail_checks=0
          echo === Coverage...

          lines=$(jq -n "$(jq '.total.lines.pct' coverage/coverage-summary.json) | floor")
          statements=$(jq -n "$(jq '.total.statements.pct' coverage/coverage-summary.json) | floor")
          functions=$(jq -n "$(jq '.total.functions.pct' coverage/coverage-summary.json) | floor")
          branches=$(jq -n "$(jq '.total.branches.pct' coverage/coverage-summary.json) | floor")

          [ ${lines} -lt ${THRESHOLD_LINE} ] && echo === "Failed Lines Coverage${NEWLINE}Got ${lines}%, but threshold is set to ${THRESHOLD_LINE}%" && fail_checks=1
          [ ${statements} -lt ${THRESHOLD_STATEMENT} ] && echo === "Failed Statements Coverage${NEWLINE}Got ${statements}%, but threshold is set to ${THRESHOLD_STATEMENT}%" && fail_checks=1
          [ ${functions} -lt ${THRESHOLD_FUNCTION} ] && echo === "Failed Functions Coverage${NEWLINE}Got ${functions}%, but threshold is set to ${THRESHOLD_FUNCTION}%" && fail_checks=1
          [ ${branches} -lt ${THRESHOLD_BRANCH} ] && echo === "Failed Branches Coverage${NEWLINE}Got ${branches}%, but threshold is set to ${THRETHRESHOLD_BRANCHSHOLD}%" && fail_checks=1

          [ "${fail_checks}" == "0" ] && echo === Passes Coverage
          exit ${fail_checks}
        env:
          THRESHOLD_LINE: 89
          THRESHOLD_STATEMENT: 89
          THRESHOLD_FUNCTION: 89
          THRESHOLD_BRANCH: 89

  malware_security_scan:
    name: Malware Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the code
        uses: actions/checkout@v2
      - name: Run malware scan
        uses: dell/common-github-actions/malware-scanner@main
        with:
          directories: .
          options: -ri
  analyze:
    name: CodeQL Analyze
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        language: ["javascript"]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      # Initializes the CodeQL tools for scanning.
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v1
        with:
          languages: ${{ matrix.language }}
      - name: Autobuild
        uses: github/codeql-action/autobuild@v1
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v1
